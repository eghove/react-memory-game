{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/NavBar/index.js","components/MemoryCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Title","highscore","title","message","role","Navbar","href","alt","userScore","topScore","MemoryCard","data-id","id","onClick","handleUpdate","name","src","image","App","state","spaceObjects","score","guessed","playing","handleRandomize","temp","_this","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","setState","updateScore","currentScore","updateGuessed","currentGuessed","push","resetGame","initialState","checkGuessed","hasBeenGuessed","i","innerFunction","this","_this2","components_Wrapper","NavBar","components_Title","map","spaceObject","components_MemoryCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ba1e8be.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable semi */\n\n// Wrapper index.js file\n\nimport React from 'react';\n// import './style.css';\n\nfunction Wrapper (props) {\n  return <div className = 'container'> {props.children} </div>\n}\n\nexport default Wrapper;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable semi */\n// Title component index.js file\n\nimport React from 'react';\n// import './style.css';\n\nfunction Title(props) {\n  if (props.highscore === true) {\n    return (\n      <div className='row'>\n        <div className='col-md-12'>\n          <div className='jumbotron text-center'>\n            <h1 className=\"display-4\">{props.title}</h1>\n            <p className='lead'>{props.message}</p>\n            <p className='alert alert-success' role='alert'>You got a new high score!</p>\n          </div>\n        </div>\n      </div>\n    )\n  } else {\n\n    return (\n      <div className='row'>\n        <div className='col-md-12'>\n          <div className='jumbotron text-center'>\n            <h1 className=\"display-4\">{props.title}</h1>\n            <p className='lead'>{props.message}</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Title;\n","\nimport React from 'react';\n\nfunction Navbar (props) {\n  return(\n    <nav className = \"navbar sticky-top navbar-expand-lg navbar-light bg-light\">\n        <a className = \"navbar-brand\" href = \"/\" alt = {props.title}>{props.title}</a>\n        <ul className = \"navbar-nav mr-auto\">\n          <li className = \"nav-item\">Click an image to start!</li>\n        </ul>\n        <span className = \"navbar-text\">\n          Your Score: {props.userScore} | Top Score: {props.topScore}\n        </span>\n    </nav>\n  )\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./index.css\";\n\nfunction MemoryCard (props) {\n  return (\n      <div className = \"col-sm-4\">\n        <div className=\"card\" data-id={props.id} \n        onClick={\n            () => props.handleUpdate(props.id)}>\n          <div className=\"card-body img-container\">\n            <img alt={props.name} src={props.image} />\n            </div>\n          </div>\n        </div>\n  )\n}\n\nexport default MemoryCard;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable semi */\nimport React, { Component } from 'react';\n// import the wrapper component\nimport Wrapper from './components/Wrapper';\n// import the title/jumbotron component\nimport Title from './components/Title';\n// import the sticky navbar/scoreboard component\nimport Navbar from './components/NavBar';\n// import the JSON object with the space objects for the memory game\nimport spaceObjects from './spaceObjects';\n// import the MemoryCard component\nimport MemoryCard from './components/MemoryCard';\n// making app the stateful component\nclass App extends Component {\n  // setting this.state.spaceObjects to the spaceObjects JSON array\n  state = {\n    spaceObjects,\n    score: 0,\n    topScore: 0,\n    guessed: [0],\n    playing: true,\n    highscore: false\n  };\n\n\n  // the function that randomizes things on the page\n  handleRandomize = () => {\n    let temp = this.state.spaceObjects\n    function shuffle(array) {\n      let currentIndex = array.length, temporaryValue, randomIndex;\n\n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n      temp = array;\n    }\n    // call the shuffle function\n    shuffle(temp);\n    // set spaceObject to the shuffled temp\n    this.setState({ spaceObjects: temp });\n  }\n\n  // function that updates the score\n  updateScore = () => {\n    let currentScore = this.state.score;\n    currentScore = currentScore + 1;\n    this.setState({ score: currentScore });\n  }\n\n  // function that updates guessed\n  updateGuessed = id => {\n    let currentGuessed = this.state.guessed;\n    // push the guessed ids into the guessed array\n    currentGuessed.push(id);\n    // store the updated guessed array\n    this.setState({ guessed: currentGuessed });\n  }\n\n  // function that resets the state\n  resetGame = () => {\n    this.setState({\n      spaceObjects,\n      score: 0,\n      guessed: [0],\n      playing: true\n    })\n  }\n\n  // function that sets the initial state\n  initialState = () => {\n    this.resetGame();\n    this.setState({topScore:0, highscore: false});\n\n  }\n\n  // checks to see if an image has already been guessed\n  checkGuessed = id => {\n    // make a tempArray and set that value=this.state.guessed\n    let tempArray = this.state.guessed\n\n    // inner function that does the checking\n    function innerFunction(id, array) {\n      // set initial value of hasBeenGuessed to false\n      let hasBeenGuessed = false;\n      // for loop that checks every item in the array\n      for (let i = 0; i < array.length; i++) {\n        if (id === array[i]) {\n          // if the id matches something already in the array, set hasBeenGuessed=true and return it.\n          hasBeenGuessed = true;\n\n          return hasBeenGuessed;\n        }\n      }\n      // pass out hasBeenGuessed to the parent checkGuessed function\n      return hasBeenGuessed;\n    }\n\n    if (innerFunction(id, tempArray) === true) {\n      // if hasBeenGuessed gets flipped to true, the game is over\n      this.setState({ playing: false });\n      return true\n    } else {\n      return false;\n    }\n  }\n\n  // function that handles the card clicks or \"guess\"\n  handleUpdate = id => {\n    // make sure the click resets highscore to false\n    this.setState({highscore: false});\n\n    // while the game is still being played, do this:\n    if (this.checkGuessed(id) === false && this.state.playing === true) {\n      // update the guessed array\n      this.updateGuessed(id);\n      // update the game score\n      this.updateScore();\n    \n    // when the game is over, do this\n    } else {\n      // if the user hit a new high score, update topScore accordingly\n      if(this.state.score > this.state.topScore) {\n        let temp = this.state.score;\n        this.setState({topScore: temp, highscore: true})\n      }\n      // reset the game, except for topScore\n      this.resetGame();\n    }\n    // no matter what, randomize the board\n    this.handleRandomize();\n  }\n\n  componentDidMount() {\n    // make sure the state is back to the initial state\n    this.resetGame();\n    // makes sure it start from a randomized state \n    this.handleRandomize();\n  }\n\n  render() {\n    return (\n      <Wrapper>\n\n        {/* the NavBar/ScoreBoard Component */}\n        <Navbar\n          title='Planetary Memory Game'\n          userScore={this.state.score}\n          topScore={this.state.topScore}\n        />\n\n        {/* the Title Component */}\n        <Title\n          title='Planetary Memory Game'\n          message='A simple click-based memory game, using React.js.'\n          highscore= {this.state.highscore}\n        />\n\n        {/* the Memory card display component */}\n        <div className=\"row\">\n          {this.state.spaceObjects.map(spaceObject => (\n            <MemoryCard\n              key={spaceObject.id}\n              id={spaceObject.id}\n              name={spaceObject.name}\n              image={spaceObject.image}\n              handleUpdate={this.handleUpdate}\n            />\n          ))}\n        </div>\n\n\n      </Wrapper>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}